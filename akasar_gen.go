// Code generated by "akasar generate". DO NOT EDIT.
//go:build !ignoreAkasarGen

package akasar

import (
	"context"
	"errors"
	"github.com/kanengo/akasar/runtime/codegen"
	"github.com/kanengo/akasar/runtime/protos"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/kanengo/akasar/akasaletControl",
		Iface: reflect.TypeOf((*akasaletControl)(nil)).Elem(),
		Impl:  reflect.TypeOf(noopAkasaletControl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return akasaletControlLocalStub{impl: impl.(akasaletControl), tracer: tracer, getHealthMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetHealth", Remote: false}), getLoadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetLoad", Remote: false}), getMetricsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetMetrics", Remote: false}), getProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetProfile", Remote: false}), initAkasaletMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "InitAkasalet", Remote: false}), updateComponentsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "UpdateComponents", Remote: false}), updateRoutingInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "UpdateRoutingInfo", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string, tracer trace.Tracer) any {
			return akasaletControlClientStub{stub: stub, getHealthMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetHealth", Remote: true}), getLoadMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetLoad", Remote: true}), getMetricsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetMetrics", Remote: true}), getProfileMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "GetProfile", Remote: true}), initAkasaletMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "InitAkasalet", Remote: true}), updateComponentsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "UpdateComponents", Remote: true}), updateRoutingInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/akasaletControl", Method: "UpdateRoutingInfo", Remote: true})}
		},
		ServerStubFn: func(impl any) codegen.Server {
			return akasaletControlServerStub{impl: impl.(akasaletControl)}
		},
	})
	codegen.Register(codegen.Registration{
		Name:  "github.com/kanengo/akasar/deployerControl",
		Iface: reflect.TypeOf((*deployerControl)(nil)).Elem(),
		Impl:  reflect.TypeOf(localDeployerControl{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return deployerControlLocalStub{impl: impl.(deployerControl), tracer: tracer, activateComponentMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "ActivateComponent", Remote: false}), exportListenerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "ExportListener", Remote: false}), getListenerAddressMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "GetListenerAddress", Remote: false}), handlerTraceSpansMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "HandlerTraceSpans", Remote: false}), logBatchMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "LogBatch", Remote: false})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string, tracer trace.Tracer) any {
			return deployerControlClientStub{stub: stub, activateComponentMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "ActivateComponent", Remote: true}), exportListenerMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "ExportListener", Remote: true}), getListenerAddressMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "GetListenerAddress", Remote: true}), handlerTraceSpansMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "HandlerTraceSpans", Remote: true}), logBatchMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/kanengo/akasar/deployerControl", Method: "LogBatch", Remote: true})}
		},
		ServerStubFn: func(impl any) codegen.Server {
			return deployerControlServerStub{impl: impl.(deployerControl)}
		},
	})
}

// akasar.InstanceOf checks.
var _ InstanceOf[akasaletControl] = (*noopAkasaletControl)(nil)
var _ InstanceOf[deployerControl] = (*localDeployerControl)(nil)

// Local stub implementations.

type akasaletControlLocalStub struct {
	impl                     akasaletControl
	tracer                   trace.Tracer
	getHealthMetrics         *codegen.MethodMetrics
	getLoadMetrics           *codegen.MethodMetrics
	getMetricsMetrics        *codegen.MethodMetrics
	getProfileMetrics        *codegen.MethodMetrics
	initAkasaletMetrics      *codegen.MethodMetrics
	updateComponentsMetrics  *codegen.MethodMetrics
	updateRoutingInfoMetrics *codegen.MethodMetrics
}

// Check that akasaletControlLocalStub implements the akasaletControl interface
var _ akasaletControl = (*akasaletControlLocalStub)(nil)

func (s akasaletControlLocalStub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {
	// Update metrics.
	begin := s.getHealthMetrics.Begin()
	defer func() { s.getHealthMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetHealth", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.GetHealth(ctx, a0)
	return
}

func (s akasaletControlLocalStub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {
	// Update metrics.
	begin := s.getLoadMetrics.Begin()
	defer func() { s.getLoadMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetLoad", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.GetLoad(ctx, a0)
	return
}

func (s akasaletControlLocalStub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {
	// Update metrics.
	begin := s.getMetricsMetrics.Begin()
	defer func() { s.getMetricsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetMetrics", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.GetMetrics(ctx, a0)
	return
}

func (s akasaletControlLocalStub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {
	// Update metrics.
	begin := s.getProfileMetrics.Begin()
	defer func() { s.getProfileMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetProfile", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.GetProfile(ctx, a0)
	return
}

func (s akasaletControlLocalStub) InitAkasalet(ctx context.Context, a0 *protos.InitAkasaletRequest) (r0 *protos.InitAkasaletReply, err error) {
	// Update metrics.
	begin := s.initAkasaletMetrics.Begin()
	defer func() { s.initAkasaletMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.InitAkasalet", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.InitAkasalet(ctx, a0)
	return
}

func (s akasaletControlLocalStub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {
	// Update metrics.
	begin := s.updateComponentsMetrics.Begin()
	defer func() { s.updateComponentsMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.UpdateComponents", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.UpdateComponents(ctx, a0)
	return
}

func (s akasaletControlLocalStub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {
	// Update metrics.
	begin := s.updateRoutingInfoMetrics.Begin()
	defer func() { s.updateRoutingInfoMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.UpdateRoutingInfo", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.UpdateRoutingInfo(ctx, a0)
	return
}

type deployerControlLocalStub struct {
	impl                      deployerControl
	tracer                    trace.Tracer
	activateComponentMetrics  *codegen.MethodMetrics
	exportListenerMetrics     *codegen.MethodMetrics
	getListenerAddressMetrics *codegen.MethodMetrics
	handlerTraceSpansMetrics  *codegen.MethodMetrics
	logBatchMetrics           *codegen.MethodMetrics
}

// Check that deployerControlLocalStub implements the deployerControl interface
var _ deployerControl = (*deployerControlLocalStub)(nil)

func (s deployerControlLocalStub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {
	// Update metrics.
	begin := s.activateComponentMetrics.Begin()
	defer func() { s.activateComponentMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.ActivateComponent", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.ActivateComponent(ctx, a0)
	return
}

func (s deployerControlLocalStub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {
	// Update metrics.
	begin := s.exportListenerMetrics.Begin()
	defer func() { s.exportListenerMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.ExportListener", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.ExportListener(ctx, a0)
	return
}

func (s deployerControlLocalStub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {
	// Update metrics.
	begin := s.getListenerAddressMetrics.Begin()
	defer func() { s.getListenerAddressMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.GetListenerAddress", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	r0, err = s.impl.GetListenerAddress(ctx, a0)
	return
}

func (s deployerControlLocalStub) HandlerTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {
	// Update metrics.
	begin := s.handlerTraceSpansMetrics.Begin()
	defer func() { s.handlerTraceSpansMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.HandlerTraceSpans", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	err = s.impl.HandlerTraceSpans(ctx, a0)
	return
}

func (s deployerControlLocalStub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {
	// Update metrics.
	begin := s.logBatchMetrics.Begin()
	defer func() { s.logBatchMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.LogBatch", trace.WithSpanKind((trace.SpanKindInternal)))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}
	defer func() {
		if err == nil {
			err = codegen.CatchResultUnwrapPanic(recover())
		}
	}()

	err = s.impl.LogBatch(ctx, a0)
	return
}

// Client stub implementations.

type akasaletControlClientStub struct {
	stub                     codegen.Stub
	tracer                   trace.Tracer
	getHealthMetrics         *codegen.MethodMetrics
	getLoadMetrics           *codegen.MethodMetrics
	getMetricsMetrics        *codegen.MethodMetrics
	getProfileMetrics        *codegen.MethodMetrics
	initAkasaletMetrics      *codegen.MethodMetrics
	updateComponentsMetrics  *codegen.MethodMetrics
	updateRoutingInfoMetrics *codegen.MethodMetrics
}

// Check that akasaletControlClientStub implements the akasaletControl interface
var _ akasaletControl = (*akasaletControlClientStub)(nil)

func (s akasaletControlClientStub) GetHealth(ctx context.Context, a0 *protos.GetHealthRequest) (r0 *protos.GetHealthReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getHealthMetrics.Begin()
	defer func() { s.getHealthMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetHealth", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetHealthRequest_39af2ee6(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_GetHealthReply_85f0a52b(dec)
	err = dec.Error()

	return
}

func (s akasaletControlClientStub) GetLoad(ctx context.Context, a0 *protos.GetLoadRequest) (r0 *protos.GetLoadReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getLoadMetrics.Begin()
	defer func() { s.getLoadMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetLoad", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetLoadRequest_f6beea32(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 1, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_GetLoadReply_b672e807(dec)
	err = dec.Error()

	return
}

func (s akasaletControlClientStub) GetMetrics(ctx context.Context, a0 *protos.GetMetricsRequest) (r0 *protos.GetMetricsReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getMetricsMetrics.Begin()
	defer func() { s.getMetricsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetMetrics", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetMetricsRequest_123eb7c9(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 2, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_GetMetricsReply_5f84a750(dec)
	err = dec.Error()

	return
}

func (s akasaletControlClientStub) GetProfile(ctx context.Context, a0 *protos.GetProfileRequest) (r0 *protos.GetProfileReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getProfileMetrics.Begin()
	defer func() { s.getProfileMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.GetProfile", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetProfileRequest_988c2ade(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 3, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_GetProfileReply_0f6d3141(dec)
	err = dec.Error()

	return
}

func (s akasaletControlClientStub) InitAkasalet(ctx context.Context, a0 *protos.InitAkasaletRequest) (r0 *protos.InitAkasaletReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.initAkasaletMetrics.Begin()
	defer func() { s.initAkasaletMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.InitAkasalet", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_InitAkasaletRequest_945c8869(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 4, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_InitAkasaletReply_918227c9(dec)
	err = dec.Error()

	return
}

func (s akasaletControlClientStub) UpdateComponents(ctx context.Context, a0 *protos.UpdateComponentsRequest) (r0 *protos.UpdateComponentsReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateComponentsMetrics.Begin()
	defer func() { s.updateComponentsMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.UpdateComponents", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_UpdateComponentsRequest_cdfe1aad(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 5, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_UpdateComponentsReply_31643a39(dec)
	err = dec.Error()

	return
}

func (s akasaletControlClientStub) UpdateRoutingInfo(ctx context.Context, a0 *protos.UpdateRoutingInfoRequest) (r0 *protos.UpdateRoutingInfoReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateRoutingInfoMetrics.Begin()
	defer func() { s.updateRoutingInfoMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.akasaletControl.UpdateRoutingInfo", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_UpdateRoutingInfoRequest_253ed44c(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 6, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_UpdateRoutingInfoReply_13c3ef0e(dec)
	err = dec.Error()

	return
}

type deployerControlClientStub struct {
	stub                      codegen.Stub
	tracer                    trace.Tracer
	activateComponentMetrics  *codegen.MethodMetrics
	exportListenerMetrics     *codegen.MethodMetrics
	getListenerAddressMetrics *codegen.MethodMetrics
	handlerTraceSpansMetrics  *codegen.MethodMetrics
	logBatchMetrics           *codegen.MethodMetrics
}

// Check that deployerControlClientStub implements the deployerControl interface
var _ deployerControl = (*deployerControlClientStub)(nil)

func (s deployerControlClientStub) ActivateComponent(ctx context.Context, a0 *protos.ActivateComponentRequest) (r0 *protos.ActivateComponentReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.activateComponentMetrics.Begin()
	defer func() { s.activateComponentMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.ActivateComponent", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_ActivateComponentRequest_187167a9(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 0, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_ActivateComponentReply_ae54a0de(dec)
	err = dec.Error()

	return
}

func (s deployerControlClientStub) ExportListener(ctx context.Context, a0 *protos.ExportListenerRequest) (r0 *protos.ExportListenerReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.exportListenerMetrics.Begin()
	defer func() { s.exportListenerMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.ExportListener", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_ExportListenerRequest_b81b65c2(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 1, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_ExportListenerReply_1f22e53a(dec)
	err = dec.Error()

	return
}

func (s deployerControlClientStub) GetListenerAddress(ctx context.Context, a0 *protos.GetListenerAddressRequest) (r0 *protos.GetListenerAddressReply, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.getListenerAddressMetrics.Begin()
	defer func() { s.getListenerAddressMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.GetListenerAddress", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetListenerAddressRequest_adb1b42c(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 2, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	r0 = serviceAkasarDec_ptr_GetListenerAddressReply_41221db9(dec)
	err = dec.Error()

	return
}

func (s deployerControlClientStub) HandlerTraceSpans(ctx context.Context, a0 *protos.TraceSpans) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.handlerTraceSpansMetrics.Begin()
	defer func() { s.handlerTraceSpansMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.HandlerTraceSpans", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_TraceSpans_436f9b86(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 3, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	err = dec.Error()

	return
}

func (s deployerControlClientStub) LogBatch(ctx context.Context, a0 *protos.LogEntryBatch) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.logBatchMetrics.Begin()
	defer func() { s.logBatchMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		ctx, span = s.tracer.Start(ctx, "akasar.deployerControl.LogBatch", trace.WithSpanKind((trace.SpanKindInternal)))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_LogEntryBatch_041d9c57(enc, a0)
	var shardKey uint64

	// Call the remote method.
	data := enc.Data()
	requestBytes = len(data)
	var results []byte
	results, err = s.stub.Invoke(ctx, 4, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDeserializer(results)
	err = dec.Error()

	return
}

// Server stub implementation.

type akasaletControlServerStub struct {
	impl akasaletControl
}

// Check that akasaletControlServerStub is implements the codegen.Server interface.
var _ codegen.Server = (*akasaletControlServerStub)(nil)

// GetHandleFn implements the codegen.Server interface.
func (s akasaletControlServerStub) GetHandleFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetHealth":
		return s.getHealth
	case "GetLoad":
		return s.getLoad
	case "GetMetrics":
		return s.getMetrics
	case "GetProfile":
		return s.getProfile
	case "InitAkasalet":
		return s.initAkasalet
	case "UpdateComponents":
		return s.updateComponents
	case "UpdateRoutingInfo":
		return s.updateRoutingInfo
	default:
		return nil
	}
}

func (s *akasaletControlServerStub) getHealth(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.GetHealthRequest
	a0 = serviceAkasarDec_ptr_GetHealthRequest_39af2ee6(dec)

	r0, appErr := s.impl.GetHealth(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetHealthReply_85f0a52b(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *akasaletControlServerStub) getLoad(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.GetLoadRequest
	a0 = serviceAkasarDec_ptr_GetLoadRequest_f6beea32(dec)

	r0, appErr := s.impl.GetLoad(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetLoadReply_b672e807(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *akasaletControlServerStub) getMetrics(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.GetMetricsRequest
	a0 = serviceAkasarDec_ptr_GetMetricsRequest_123eb7c9(dec)

	r0, appErr := s.impl.GetMetrics(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetMetricsReply_5f84a750(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *akasaletControlServerStub) getProfile(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.GetProfileRequest
	a0 = serviceAkasarDec_ptr_GetProfileRequest_988c2ade(dec)

	r0, appErr := s.impl.GetProfile(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetProfileReply_0f6d3141(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *akasaletControlServerStub) initAkasalet(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.InitAkasaletRequest
	a0 = serviceAkasarDec_ptr_InitAkasaletRequest_945c8869(dec)

	r0, appErr := s.impl.InitAkasalet(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_InitAkasaletReply_918227c9(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *akasaletControlServerStub) updateComponents(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.UpdateComponentsRequest
	a0 = serviceAkasarDec_ptr_UpdateComponentsRequest_cdfe1aad(dec)

	r0, appErr := s.impl.UpdateComponents(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_UpdateComponentsReply_31643a39(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *akasaletControlServerStub) updateRoutingInfo(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.UpdateRoutingInfoRequest
	a0 = serviceAkasarDec_ptr_UpdateRoutingInfoRequest_253ed44c(dec)

	r0, appErr := s.impl.UpdateRoutingInfo(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_UpdateRoutingInfoReply_13c3ef0e(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type deployerControlServerStub struct {
	impl deployerControl
}

// Check that deployerControlServerStub is implements the codegen.Server interface.
var _ codegen.Server = (*deployerControlServerStub)(nil)

// GetHandleFn implements the codegen.Server interface.
func (s deployerControlServerStub) GetHandleFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "ActivateComponent":
		return s.activateComponent
	case "ExportListener":
		return s.exportListener
	case "GetListenerAddress":
		return s.getListenerAddress
	case "HandlerTraceSpans":
		return s.handlerTraceSpans
	case "LogBatch":
		return s.logBatch
	default:
		return nil
	}
}

func (s *deployerControlServerStub) activateComponent(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.ActivateComponentRequest
	a0 = serviceAkasarDec_ptr_ActivateComponentRequest_187167a9(dec)

	r0, appErr := s.impl.ActivateComponent(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_ActivateComponentReply_ae54a0de(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *deployerControlServerStub) exportListener(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.ExportListenerRequest
	a0 = serviceAkasarDec_ptr_ExportListenerRequest_b81b65c2(dec)

	r0, appErr := s.impl.ExportListener(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_ExportListenerReply_1f22e53a(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *deployerControlServerStub) getListenerAddress(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.GetListenerAddressRequest
	a0 = serviceAkasarDec_ptr_GetListenerAddressRequest_adb1b42c(dec)

	r0, appErr := s.impl.GetListenerAddress(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	serviceAkasarEnc_ptr_GetListenerAddressReply_41221db9(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *deployerControlServerStub) handlerTraceSpans(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.TraceSpans
	a0 = serviceAkasarDec_ptr_TraceSpans_436f9b86(dec)

	appErr := s.impl.HandlerTraceSpans(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s *deployerControlServerStub) logBatch(ctx context.Context, args []byte) (res []byte, err error) {
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Encode arguments.
	dec := codegen.NewDeserializer(args)
	var a0 *protos.LogEntryBatch
	a0 = serviceAkasarDec_ptr_LogEntryBatch_041d9c57(dec)

	appErr := s.impl.LogBatch(ctx, a0)

	//Encode the results.
	enc := codegen.NewSerializer()
	enc.Error(appErr)
	return enc.Data(), nil
}

func serviceAkasarEnc_ptr_GetHealthRequest_39af2ee6(enc *codegen.Serializer, arg *protos.GetHealthRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetHealthRequest_39af2ee6(dec *codegen.Deserializer) *protos.GetHealthRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetHealthRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetHealthReply_85f0a52b(enc *codegen.Serializer, arg *protos.GetHealthReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetHealthReply_85f0a52b(dec *codegen.Deserializer) *protos.GetHealthReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetHealthReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetLoadRequest_f6beea32(enc *codegen.Serializer, arg *protos.GetLoadRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetLoadRequest_f6beea32(dec *codegen.Deserializer) *protos.GetLoadRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetLoadRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetLoadReply_b672e807(enc *codegen.Serializer, arg *protos.GetLoadReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetLoadReply_b672e807(dec *codegen.Deserializer) *protos.GetLoadReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetLoadReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetMetricsRequest_123eb7c9(enc *codegen.Serializer, arg *protos.GetMetricsRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetMetricsRequest_123eb7c9(dec *codegen.Deserializer) *protos.GetMetricsRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetMetricsRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetMetricsReply_5f84a750(enc *codegen.Serializer, arg *protos.GetMetricsReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetMetricsReply_5f84a750(dec *codegen.Deserializer) *protos.GetMetricsReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetMetricsReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetProfileRequest_988c2ade(enc *codegen.Serializer, arg *protos.GetProfileRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetProfileRequest_988c2ade(dec *codegen.Deserializer) *protos.GetProfileRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetProfileRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetProfileReply_0f6d3141(enc *codegen.Serializer, arg *protos.GetProfileReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetProfileReply_0f6d3141(dec *codegen.Deserializer) *protos.GetProfileReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetProfileReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_InitAkasaletRequest_945c8869(enc *codegen.Serializer, arg *protos.InitAkasaletRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_InitAkasaletRequest_945c8869(dec *codegen.Deserializer) *protos.InitAkasaletRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.InitAkasaletRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_InitAkasaletReply_918227c9(enc *codegen.Serializer, arg *protos.InitAkasaletReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_InitAkasaletReply_918227c9(dec *codegen.Deserializer) *protos.InitAkasaletReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.InitAkasaletReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_UpdateComponentsRequest_cdfe1aad(enc *codegen.Serializer, arg *protos.UpdateComponentsRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_UpdateComponentsRequest_cdfe1aad(dec *codegen.Deserializer) *protos.UpdateComponentsRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateComponentsRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_UpdateComponentsReply_31643a39(enc *codegen.Serializer, arg *protos.UpdateComponentsReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_UpdateComponentsReply_31643a39(dec *codegen.Deserializer) *protos.UpdateComponentsReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateComponentsReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_UpdateRoutingInfoRequest_253ed44c(enc *codegen.Serializer, arg *protos.UpdateRoutingInfoRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_UpdateRoutingInfoRequest_253ed44c(dec *codegen.Deserializer) *protos.UpdateRoutingInfoRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateRoutingInfoRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_UpdateRoutingInfoReply_13c3ef0e(enc *codegen.Serializer, arg *protos.UpdateRoutingInfoReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_UpdateRoutingInfoReply_13c3ef0e(dec *codegen.Deserializer) *protos.UpdateRoutingInfoReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.UpdateRoutingInfoReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_ActivateComponentRequest_187167a9(enc *codegen.Serializer, arg *protos.ActivateComponentRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_ActivateComponentRequest_187167a9(dec *codegen.Deserializer) *protos.ActivateComponentRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.ActivateComponentRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_ActivateComponentReply_ae54a0de(enc *codegen.Serializer, arg *protos.ActivateComponentReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_ActivateComponentReply_ae54a0de(dec *codegen.Deserializer) *protos.ActivateComponentReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.ActivateComponentReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_ExportListenerRequest_b81b65c2(enc *codegen.Serializer, arg *protos.ExportListenerRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_ExportListenerRequest_b81b65c2(dec *codegen.Deserializer) *protos.ExportListenerRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.ExportListenerRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_ExportListenerReply_1f22e53a(enc *codegen.Serializer, arg *protos.ExportListenerReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_ExportListenerReply_1f22e53a(dec *codegen.Deserializer) *protos.ExportListenerReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.ExportListenerReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetListenerAddressRequest_adb1b42c(enc *codegen.Serializer, arg *protos.GetListenerAddressRequest) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetListenerAddressRequest_adb1b42c(dec *codegen.Deserializer) *protos.GetListenerAddressRequest {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetListenerAddressRequest
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_GetListenerAddressReply_41221db9(enc *codegen.Serializer, arg *protos.GetListenerAddressReply) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_GetListenerAddressReply_41221db9(dec *codegen.Deserializer) *protos.GetListenerAddressReply {
	if !dec.Bool() {
		return nil
	}
	var res protos.GetListenerAddressReply
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_TraceSpans_436f9b86(enc *codegen.Serializer, arg *protos.TraceSpans) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_TraceSpans_436f9b86(dec *codegen.Deserializer) *protos.TraceSpans {
	if !dec.Bool() {
		return nil
	}
	var res protos.TraceSpans
	dec.UnmarshalProto(&res)
	return &res
}

func serviceAkasarEnc_ptr_LogEntryBatch_041d9c57(enc *codegen.Serializer, arg *protos.LogEntryBatch) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		enc.MarshalProto(arg)
	}
}

func serviceAkasarDec_ptr_LogEntryBatch_041d9c57(dec *codegen.Deserializer) *protos.LogEntryBatch {
	if !dec.Bool() {
		return nil
	}
	var res protos.LogEntryBatch
	dec.UnmarshalProto(&res)
	return &res
}
