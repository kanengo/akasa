// Code generated by "akasar generate". DO NOT EDIT.
//go:build !ignoreAkasarGen

package main

import (
	"context"
	"github.com/kanengo/akasar"
	"github.com/kanengo/akasar/runtime/codegen"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/kanengo/akasar/Root",
		Iface: reflect.TypeOf((*akasar.Root)(nil)).Elem(),
		Impl:  reflect.TypeOf(app{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return rootLocalStub{impl: impl.(akasar.Root), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string, tracer trace.Tracer) any {
			return rootClientStub{stub: stub}
		},
		ServerStubFn: func(impl any) codegen.Server {
			return rootServerStub{impl: impl.(akasar.Root)}
		},
	})
}

// akasar.InstanceOf checks.
var _ akasar.InstanceOf[akasar.Root] = (*app)(nil)

// Local stub implementations.

type rootLocalStub struct {
	impl   akasar.Root
	tracer trace.Tracer
}

// Check that rootLocalStub implements the akasar.Root interface
var _ akasar.Root = (*rootLocalStub)(nil)

// Client stub implementations.

type rootClientStub struct {
	stub   codegen.Stub
	tracer trace.Tracer
}

// Check that rootClientStub implements the akasar.Root interface
var _ akasar.Root = (*rootClientStub)(nil)

// Server stub implementation.

type rootServerStub struct {
	impl akasar.Root
}

// Check that rootServerStub is implements the codegen.Server interface.
var _ codegen.Server = (*rootServerStub)(nil)

// GetHandleFn implements the codegen.Server interface.
func (s rootServerStub) GetHandleFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}
